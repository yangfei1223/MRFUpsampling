function result = MRFUpsamplingEq(color,depth,sigma,alpha)
%Solve the large sparse linear system generated by the original MRF upsamling model
%Output: 
%   result      -   the output depth data
%Input: 
%   color       -   Input color image
%   depth -   Depth map need upsampling
%   sigma       -   Coefficient of gaussian kernel for color similarity
%   alpha       -   The balance factor between data term and smoothness term
%Reference
%   Image and Sparse Laser Fusion for Dense Scene Reconstruction
%   Alastair Harrison and Paul Newman
%Code Author:
%   Liu Junyi, Zhejiang University
%   June 2012
%   Modified by Liu Junyi
%   Dec. 2012
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %For Debug
%     savefile = 'Debug_MRF_Upsampling.mat';
    
    height = size(color,1);
    width = size(color,2);
    pixelNumber = height * width;
    
    %Depth Matrix - N*1
    depth = double(depth);
    Z = sparse(reshape(depth,pixelNumber,1));
    
    %Data Term Matrix - N*N
    x = find(reshape(depth,pixelNumber,1)>0);
    y = x;
    s = 1;
    W = sparse(x,y,s,pixelNumber,pixelNumber);
    
    %Smoothness Term Matrix - 4N*N, Here we exclude the pixels on the boundary
    color = double(color);
    tic;
    S = ColorSmoothnessTerm(color,sigma);
%     save(savefile,'S','S2');
    SmoothnessTime = toc;
    fprintf('    The running time of generating the pairwise matrix is %.5f s\n',SmoothnessTime)
    
    %Compute the A and b
    tic;
    A1 = S'*S;
    A2 = W'*W;
    A = alpha*A1 + A2;
    b = W'*W*Z;
    MatrixGenerateTime = toc;
    fprintf('    The running time of getting A and b is %.5f s\n',MatrixGenerateTime)
    
    %Using Backslash to solve the Ax=b
    tic;
    Result = A\b;
    BackslashTime = toc;
    fprintf('    The running time of solving Ax=b by Backslash is %.5f s\n',BackslashTime)
    
    result = full(reshape(double(Result),height,width));
    fprintf('    Done!\n')
end